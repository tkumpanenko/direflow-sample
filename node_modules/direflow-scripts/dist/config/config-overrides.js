"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var event_hooks_webpack_plugin_1 = __importDefault(require("event-hooks-webpack-plugin"));
var webpack_filter_warnings_plugin_1 = __importDefault(require("webpack-filter-warnings-plugin"));
var webpack_1 = require("webpack");
var rimraf_1 = __importDefault(require("rimraf"));
var fs_1 = __importDefault(require("fs"));
var path_1 = require("path");
var tasks_1 = require("event-hooks-webpack-plugin/lib/tasks");
var entryResolver_1 = __importDefault(require("../helpers/entryResolver"));
var getDireflowConfig_1 = __importDefault(require("../helpers/getDireflowConfig"));
function addEntries(entry, pathIndex, env, config) {
    var _a, _b, _c, _d;
    var originalEntry = __spreadArrays(entry);
    var react = (_a = config === null || config === void 0 ? void 0 : config.modules) === null || _a === void 0 ? void 0 : _a.react;
    var reactDOM = (_b = config === null || config === void 0 ? void 0 : config.modules) === null || _b === void 0 ? void 0 : _b.reactDOM;
    var useSplit = !!((_c = config === null || config === void 0 ? void 0 : config.build) === null || _c === void 0 ? void 0 : _c.split);
    var componentPath = ((_d = config === null || config === void 0 ? void 0 : config.build) === null || _d === void 0 ? void 0 : _d.componentPath) || 'direflow-components';
    var resolvedEntries = entryResolver_1.default(pathIndex, componentPath, { react: react, reactDOM: reactDOM });
    var newEntry = { main: pathIndex };
    originalEntry.forEach(function (path, index) {
        newEntry["path-" + index] = path;
    });
    resolvedEntries.forEach(function (entries) {
        Object.keys(entries).forEach(function (key) {
            newEntry[key] = entries[key];
        });
    });
    var flatList = Object.values(newEntry);
    if (env === 'development') {
        return __spreadArrays(flatList, [path_1.resolve(__dirname, '../template-scripts/welcome.js')]);
    }
    if (useSplit) {
        return newEntry;
    }
    return flatList;
}
function overrideModule(module) {
    var cssRuleIndex = module.rules[2].oneOf.findIndex(function (rule) { return '.css'.match(rule.test); });
    var scssRuleIndex = module.rules[2].oneOf.findIndex(function (rule) { return '.scss'.match(rule.test); });
    if (cssRuleIndex !== -1) {
        module.rules[2].oneOf[cssRuleIndex].use = ['to-string-loader', 'css-loader'];
    }
    if (scssRuleIndex !== -1) {
        module.rules[2].oneOf[scssRuleIndex].use = ['to-string-loader', 'css-loader', 'sass-loader'];
    }
    module.rules[2].oneOf.unshift({
        test: /\.svg$/,
        use: ['@svgr/webpack'],
    });
    return module;
}
function overrideOutput(output, config) {
    var _a, _b, _c;
    var useSplit = (_a = config === null || config === void 0 ? void 0 : config.build) === null || _a === void 0 ? void 0 : _a.split;
    var filename = ((_b = config === null || config === void 0 ? void 0 : config.build) === null || _b === void 0 ? void 0 : _b.filename) || 'direflowBundle.js';
    var chunkFilename = ((_c = config === null || config === void 0 ? void 0 : config.build) === null || _c === void 0 ? void 0 : _c.chunkFilename) || 'vendor.js';
    var outputFilename = useSplit ? '[name].js' : filename;
    return __assign(__assign({}, output), { filename: outputFilename, chunkFilename: chunkFilename });
}
function overrideOptimization(optimization, env, config) {
    var _a;
    optimization.minimizer[0].options.sourceMap = env === 'development';
    var useVendor = (_a = config === null || config === void 0 ? void 0 : config.build) === null || _a === void 0 ? void 0 : _a.vendor;
    var vendorSplitChunks = {
        cacheGroups: {
            vendor: {
                test: /node_modules/,
                chunks: 'initial',
                name: 'vendor',
                enforce: true,
            },
        },
    };
    return __assign(__assign({}, optimization), { splitChunks: useVendor ? vendorSplitChunks : false, runtimeChunk: false });
}
function overridePlugins(plugins, entry, env, config) {
    if (plugins[0].options) {
        plugins[0].options.inject = 'head';
    }
    plugins.push(new event_hooks_webpack_plugin_1.default({
        done: new tasks_1.PromiseTask(function () { return copyBundleScript(env, entry, config); }),
    }));
    plugins.push(new webpack_filter_warnings_plugin_1.default({
        exclude: [
            /Module not found.*/,
            /Critical dependency: the request of a dependency is an expression/,
        ],
    }));
    if (config === null || config === void 0 ? void 0 : config.polyfills) {
        plugins.push(new webpack_1.EnvironmentPlugin(Object.fromEntries(Object.entries(config.polyfills).map(function (_a) {
            var key = _a[0], value = _a[1];
            var envKey = "DIREFLOW_" + key.toUpperCase();
            if (value === 'true' || value === 'false') {
                return [envKey, value === 'true'];
            }
            return [envKey, value];
        }))));
    }
    return plugins;
}
function overrideResolve(currentResolve) {
    try {
        var ModuleScopePlugin_1 = require('react-dev-utils/ModuleScopePlugin');
        currentResolve.plugins = currentResolve.plugins.filter(function (plugin) { return !(plugin instanceof ModuleScopePlugin_1); });
    }
    catch (error) {
        // supress error
    }
    return currentResolve;
}
function overrideExternals(externals, env, config) {
    var _a, _b;
    if (env === 'development') {
        return externals;
    }
    var extraExternals = __assign({}, externals);
    var react = (_a = config === null || config === void 0 ? void 0 : config.modules) === null || _a === void 0 ? void 0 : _a.react;
    var reactDOM = (_b = config === null || config === void 0 ? void 0 : config.modules) === null || _b === void 0 ? void 0 : _b.reactDOM;
    if (react) {
        extraExternals.react = 'React';
    }
    if (reactDOM) {
        extraExternals['react-dom'] = 'ReactDOM';
    }
    return extraExternals;
}
function copyBundleScript(env, entry, config) {
    var _a, _b, _c, _d, _e;
    return __awaiter(this, void 0, void 0, function () {
        var filename, chunkFilename, emitAll, emitSourceMaps, emitIndexHTML;
        return __generator(this, function (_f) {
            if (env !== 'production') {
                return [2 /*return*/];
            }
            if (!fs_1.default.existsSync('build')) {
                return [2 /*return*/];
            }
            filename = ((_a = config === null || config === void 0 ? void 0 : config.build) === null || _a === void 0 ? void 0 : _a.filename) || 'direflowBundle.js';
            chunkFilename = ((_b = config === null || config === void 0 ? void 0 : config.build) === null || _b === void 0 ? void 0 : _b.chunkFilename) || 'vendor.js';
            emitAll = (_c = config === null || config === void 0 ? void 0 : config.build) === null || _c === void 0 ? void 0 : _c.emitAll;
            emitSourceMaps = (_d = config === null || config === void 0 ? void 0 : config.build) === null || _d === void 0 ? void 0 : _d.emitSourceMap;
            emitIndexHTML = (_e = config === null || config === void 0 ? void 0 : config.build) === null || _e === void 0 ? void 0 : _e.emitIndexHTML;
            if (emitAll) {
                return [2 /*return*/];
            }
            fs_1.default.readdirSync('build').forEach(function (file) {
                if (file === filename) {
                    return;
                }
                if (file === chunkFilename) {
                    return;
                }
                if (!Array.isArray(entry) && Object.keys(entry).some(function (path) { return path + ".js" === file; })) {
                    return;
                }
                if (emitSourceMaps && file.endsWith('.map')) {
                    return;
                }
                if (emitIndexHTML && file.endsWith('.html')) {
                    return;
                }
                rimraf_1.default.sync("build/" + file);
            });
            return [2 /*return*/];
        });
    });
}
/**
 * TODO: This function should be removed in next minor version
 * @deprecated
 * @param flag
 * @param env
 */
function hasOptions(flag, env) {
    if (env !== 'production') {
        return false;
    }
    if (process.argv.length < 3) {
        return false;
    }
    if (!process.argv.some(function (arg) { return arg === "--" + flag || arg === "-" + flag[0]; })) {
        return false;
    }
    return true;
}
/**
 * TODO: This function should be removed in next minor version
 * @deprecated
 * @param config
 * @param options
 */
function setDeprecatedOptions(env, config, options) {
    var _a, _b, _c, _d, _e, _f;
    if (!options) {
        return config;
    }
    var newObj = config ? JSON.parse(JSON.stringify(config)) : {};
    var filename = options.filename, chunkFilename = options.chunkFilename, react = options.react, reactDOM = options.reactDOM;
    var useSplit = hasOptions('split', env);
    var useVendor = hasOptions('vendor', env);
    if (filename && !((_a = newObj.build) === null || _a === void 0 ? void 0 : _a.filename)) {
        if (!newObj.build) {
            newObj.build = { filename: filename };
        }
        else {
            newObj.build.filename = filename;
        }
    }
    if (chunkFilename && !((_b = newObj.build) === null || _b === void 0 ? void 0 : _b.chunkFilename)) {
        if (!newObj.build) {
            newObj.build = { chunkFilename: chunkFilename };
        }
        else {
            newObj.build.chunkFilename = chunkFilename;
        }
    }
    if (useSplit && !((_c = newObj.build) === null || _c === void 0 ? void 0 : _c.split)) {
        if (!newObj.build) {
            newObj.build = { split: useSplit };
        }
        else {
            newObj.build.split = useSplit;
        }
    }
    if (useVendor && !((_d = newObj.build) === null || _d === void 0 ? void 0 : _d.vendor)) {
        if (!newObj.build) {
            newObj.build = { vendor: useVendor };
        }
        else {
            newObj.build.vendor = useVendor;
        }
    }
    if (react && !((_e = newObj.modules) === null || _e === void 0 ? void 0 : _e.react)) {
        if (!newObj.modules) {
            newObj.modules = { react: react };
        }
        else {
            newObj.modules.react = react;
        }
    }
    if (reactDOM && !((_f = newObj.modules) === null || _f === void 0 ? void 0 : _f.reactDOM)) {
        if (!newObj.modules) {
            newObj.modules = { reactDOM: reactDOM };
        }
        else {
            newObj.modules.reactDOM = reactDOM;
        }
    }
    return newObj;
}
module.exports = function override(config, env, options) {
    var originalEntry = __spreadArrays(config.entry);
    var pathIndex = (env === 'development' ? originalEntry.splice(1, 1) : originalEntry.splice(0, 1))[0];
    /**
     * TODO: Remove deprecated options
     */
    var direflowConfig = setDeprecatedOptions(
    // Set deprecated options on config
    env, getDireflowConfig_1.default(pathIndex), options);
    var entries = addEntries(config.entry, pathIndex, env, direflowConfig);
    var overridenConfig = __assign(__assign({}, config), { entry: entries, module: overrideModule(config.module), output: overrideOutput(config.output, direflowConfig), optimization: overrideOptimization(config.optimization, env, direflowConfig), resolve: overrideResolve(config.resolve), plugins: overridePlugins(config.plugins, entries, env, direflowConfig), externals: overrideExternals(config.externals, env, direflowConfig) });
    return overridenConfig;
};
