{"ast":null,"code":"import _inherits from \"/home/taras/dev/lp-button/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/taras/dev/lp-button/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/home/taras/dev/lp-button/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _slicedToArray from \"/home/taras/dev/lp-button/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/taras/dev/lp-button/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/taras/dev/lp-button/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* eslint-disable class-methods-use-this */\n\n/* eslint-disable max-classes-per-file */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport clonedeep from 'lodash.clonedeep';\nimport createProxyRoot from './helpers/proxyRoot';\nimport { EventProvider } from './components/EventContext';\nimport registeredPlugins from './plugins/plugins';\nimport getSerialized from './helpers/getSerialized';\n\nvar WebComponentFactory = /*#__PURE__*/function () {\n  function WebComponentFactory(componentProperties, rootComponent, shadow, anonymousSlot, plugins, connectCallback) {\n    _classCallCheck(this, WebComponentFactory);\n\n    this.componentProperties = componentProperties;\n    this.rootComponent = rootComponent;\n    this.shadow = shadow;\n    this.anonymousSlot = anonymousSlot;\n    this.plugins = plugins;\n    this.connectCallback = connectCallback;\n    this.componentAttributes = {};\n    this.reflectPropertiesToAttributes();\n  }\n  /**\n   * All properties with primitive values are added to attributes.\n   */\n\n\n  _createClass(WebComponentFactory, [{\n    key: \"reflectPropertiesToAttributes\",\n    value: function reflectPropertiesToAttributes() {\n      var _this = this;\n\n      Object.entries(this.componentProperties).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        if (typeof value !== 'number' && typeof value !== 'string' && typeof value !== 'boolean') {\n          return;\n        }\n\n        _this.componentAttributes[key.toLowerCase()] = {\n          property: key,\n          value: value\n        };\n      });\n    }\n    /**\n     * Create new class that will serve as the Web Component.\n     */\n\n  }, {\n    key: \"create\",\n    value: function create() {\n      var factory = this;\n      return /*#__PURE__*/function (_HTMLElement) {\n        _inherits(WebComponent, _HTMLElement);\n\n        var _super = _createSuper(WebComponent);\n\n        function WebComponent() {\n          var _this2;\n\n          _classCallCheck(this, WebComponent);\n\n          _this2 = _super.call(this);\n          _this2.initialProperties = clonedeep(factory.componentProperties);\n          _this2.properties = {};\n          _this2.hasConnected = false;\n          /**\n           * Dispatch an event from the Web Component\n           */\n\n          _this2.eventDispatcher = function (event) {\n            _this2.dispatchEvent(event);\n          };\n\n          _this2.transferInitialProperties();\n\n          _this2.subscribeToProperties();\n\n          return _this2;\n        }\n        /**\n         * Observe attributes for changes.\n         * Part of the Web Component Standard.\n         */\n\n\n        _createClass(WebComponent, [{\n          key: \"connectedCallback\",\n          value:\n          /**\n           * Web Component gets mounted on the DOM.\n           */\n          function connectedCallback() {\n            var _a;\n\n            this.mountReactApp({\n              initial: true\n            });\n            this.hasConnected = true;\n            (_a = factory.connectCallback) === null || _a === void 0 ? void 0 : _a.call(factory, this);\n          }\n          /**\n           * When an attribute is changed, this callback function is called.\n           * @param name name of the attribute\n           * @param oldValue value before change\n           * @param newValue value after change\n           */\n\n        }, {\n          key: \"attributeChangedCallback\",\n          value: function attributeChangedCallback(name, oldValue, newValue) {\n            if (!this.hasConnected) {\n              return;\n            }\n\n            if (oldValue === newValue) {\n              return;\n            }\n\n            if (!factory.componentAttributes.hasOwnProperty(name)) {\n              return;\n            }\n\n            var propertyName = factory.componentAttributes[name].property;\n            this.properties[propertyName] = getSerialized(newValue);\n            this.mountReactApp();\n          }\n          /**\n           * When a property is changed, this callback function is called.\n           * @param name name of the property\n           * @param oldValue value before change\n           * @param newValue value after change\n           */\n\n        }, {\n          key: \"propertyChangedCallback\",\n          value: function propertyChangedCallback(name, oldValue, newValue) {\n            if (!this.hasConnected) {\n              return;\n            }\n\n            if (oldValue === newValue) {\n              return;\n            }\n\n            this.properties[name] = newValue;\n            this.mountReactApp();\n          }\n          /**\n           * Web Component gets unmounted from the DOM.\n           */\n\n        }, {\n          key: \"disconnectedCallback\",\n          value: function disconnectedCallback() {\n            ReactDOM.unmountComponentAtNode(this);\n          }\n          /**\n           * Setup getters and setters for all properties.\n           * Here we ensure that the 'propertyChangedCallback' will get invoked\n           * when a property changes.\n           */\n\n        }, {\n          key: \"subscribeToProperties\",\n          value: function subscribeToProperties() {\n            var _this3 = this;\n\n            var propertyMap = {};\n            Object.keys(this.initialProperties).forEach(function (key) {\n              propertyMap[key] = {\n                configurable: true,\n                enumerable: true,\n                get: function get() {\n                  var currentValue = _this3.properties.hasOwnProperty(key) ? _this3.properties[key] : _this3.initialProperties[key];\n                  return currentValue;\n                },\n                set: function set(newValue) {\n                  var oldValue = _this3.properties.hasOwnProperty(key) ? _this3.properties[key] : _this3.initialProperties[key];\n\n                  _this3.propertyChangedCallback(key, oldValue, newValue);\n                }\n              };\n            });\n            Object.defineProperties(this, propertyMap);\n          }\n          /**\n           * Syncronize all properties and attributes\n           */\n\n        }, {\n          key: \"syncronizePropertiesAndAttributes\",\n          value: function syncronizePropertiesAndAttributes() {\n            var _this4 = this;\n\n            Object.keys(this.initialProperties).forEach(function (key) {\n              if (_this4.properties.hasOwnProperty(key)) {\n                return;\n              }\n\n              if (_this4.getAttribute(key) !== null) {\n                _this4.properties[key] = getSerialized(_this4.getAttribute(key));\n                return;\n              }\n\n              _this4.properties[key] = _this4.initialProperties[key];\n            });\n          }\n          /**\n           * Transfer initial properties from the custom element.\n           */\n\n        }, {\n          key: \"transferInitialProperties\",\n          value: function transferInitialProperties() {\n            var _this5 = this;\n\n            Object.keys(this.initialProperties).forEach(function (key) {\n              if (_this5.hasOwnProperty(key)) {\n                _this5.properties[key] = _this5[key];\n              }\n            });\n          }\n          /**\n           * Apply plugins\n           */\n\n        }, {\n          key: \"applyPlugins\",\n          value: function applyPlugins(application) {\n            var _this6 = this;\n\n            var shadowChildren = [];\n            var applicationWithPlugins = registeredPlugins.reduce(function (app, currentPlugin) {\n              var pluginResult = currentPlugin(_this6, factory.plugins, app);\n\n              if (!pluginResult) {\n                return app;\n              }\n\n              var _pluginResult = _slicedToArray(pluginResult, 2),\n                  wrapper = _pluginResult[0],\n                  shadowChild = _pluginResult[1];\n\n              if (shadowChild) {\n                shadowChildren.push(shadowChild);\n              }\n\n              return wrapper;\n            }, application);\n            return [applicationWithPlugins, shadowChildren];\n          }\n          /**\n           * Generate react props based on properties and attributes.\n           */\n\n        }, {\n          key: \"reactProps\",\n          value: function reactProps() {\n            this.syncronizePropertiesAndAttributes();\n            return this.properties;\n          }\n          /**\n           * Mount React App onto the Web Component\n           */\n\n        }, {\n          key: \"mountReactApp\",\n          value: function mountReactApp(options) {\n            var _this7 = this;\n\n            var anonymousSlot = factory.anonymousSlot ? React.createElement('slot') : undefined;\n            var application = React.createElement(EventProvider, {\n              value: this.eventDispatcher\n            }, React.createElement(factory.rootComponent, this.reactProps(), anonymousSlot));\n\n            var _this$applyPlugins = this.applyPlugins(application),\n                _this$applyPlugins2 = _slicedToArray(_this$applyPlugins, 2),\n                applicationWithPlugins = _this$applyPlugins2[0],\n                shadowChildren = _this$applyPlugins2[1];\n\n            if (!factory.shadow) {\n              ReactDOM.render(applicationWithPlugins, this);\n              return;\n            }\n\n            var currentChildren;\n\n            if (options === null || options === void 0 ? void 0 : options.initial) {\n              currentChildren = Array.from(this.children).map(function (child) {\n                return child.cloneNode(true);\n              });\n            }\n\n            var root = createProxyRoot(this, shadowChildren);\n            ReactDOM.render(React.createElement(root.open, null, applicationWithPlugins), this);\n\n            if (currentChildren) {\n              currentChildren.forEach(function (child) {\n                return _this7.append(child);\n              });\n            }\n          }\n        }], [{\n          key: \"observedAttributes\",\n          get: function get() {\n            return Object.keys(factory.componentAttributes);\n          }\n        }]);\n\n        return WebComponent;\n      }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n    }\n  }]);\n\n  return WebComponentFactory;\n}();\n\nexport default WebComponentFactory;","map":{"version":3,"sources":["/home/taras/dev/lp-button/node_modules/direflow-component/dist/WebComponentFactory.js"],"names":["React","ReactDOM","clonedeep","createProxyRoot","EventProvider","registeredPlugins","getSerialized","WebComponentFactory","componentProperties","rootComponent","shadow","anonymousSlot","plugins","connectCallback","componentAttributes","reflectPropertiesToAttributes","Object","entries","forEach","key","value","toLowerCase","property","factory","initialProperties","properties","hasConnected","eventDispatcher","event","dispatchEvent","transferInitialProperties","subscribeToProperties","_a","mountReactApp","initial","call","name","oldValue","newValue","hasOwnProperty","propertyName","unmountComponentAtNode","propertyMap","keys","configurable","enumerable","get","currentValue","set","propertyChangedCallback","defineProperties","getAttribute","application","shadowChildren","applicationWithPlugins","reduce","app","currentPlugin","pluginResult","wrapper","shadowChild","push","syncronizePropertiesAndAttributes","options","createElement","undefined","reactProps","applyPlugins","render","currentChildren","Array","from","children","map","child","cloneNode","root","open","append","HTMLElement"],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport clonedeep from 'lodash.clonedeep';\nimport createProxyRoot from './helpers/proxyRoot';\nimport { EventProvider } from './components/EventContext';\nimport registeredPlugins from './plugins/plugins';\nimport getSerialized from './helpers/getSerialized';\nclass WebComponentFactory {\n    constructor(componentProperties, rootComponent, shadow, anonymousSlot, plugins, connectCallback) {\n        this.componentProperties = componentProperties;\n        this.rootComponent = rootComponent;\n        this.shadow = shadow;\n        this.anonymousSlot = anonymousSlot;\n        this.plugins = plugins;\n        this.connectCallback = connectCallback;\n        this.componentAttributes = {};\n        this.reflectPropertiesToAttributes();\n    }\n    /**\n     * All properties with primitive values are added to attributes.\n     */\n    reflectPropertiesToAttributes() {\n        Object.entries(this.componentProperties).forEach(([key, value]) => {\n            if (typeof value !== 'number' && typeof value !== 'string' && typeof value !== 'boolean') {\n                return;\n            }\n            this.componentAttributes[key.toLowerCase()] = {\n                property: key,\n                value,\n            };\n        });\n    }\n    /**\n     * Create new class that will serve as the Web Component.\n     */\n    create() {\n        const factory = this;\n        return class WebComponent extends HTMLElement {\n            constructor() {\n                super();\n                this.initialProperties = clonedeep(factory.componentProperties);\n                this.properties = {};\n                this.hasConnected = false;\n                /**\n                 * Dispatch an event from the Web Component\n                 */\n                this.eventDispatcher = (event) => {\n                    this.dispatchEvent(event);\n                };\n                this.transferInitialProperties();\n                this.subscribeToProperties();\n            }\n            /**\n             * Observe attributes for changes.\n             * Part of the Web Component Standard.\n             */\n            static get observedAttributes() {\n                return Object.keys(factory.componentAttributes);\n            }\n            /**\n             * Web Component gets mounted on the DOM.\n             */\n            connectedCallback() {\n                var _a;\n                this.mountReactApp({ initial: true });\n                this.hasConnected = true;\n                (_a = factory.connectCallback) === null || _a === void 0 ? void 0 : _a.call(factory, this);\n            }\n            /**\n             * When an attribute is changed, this callback function is called.\n             * @param name name of the attribute\n             * @param oldValue value before change\n             * @param newValue value after change\n             */\n            attributeChangedCallback(name, oldValue, newValue) {\n                if (!this.hasConnected) {\n                    return;\n                }\n                if (oldValue === newValue) {\n                    return;\n                }\n                if (!factory.componentAttributes.hasOwnProperty(name)) {\n                    return;\n                }\n                const propertyName = factory.componentAttributes[name].property;\n                this.properties[propertyName] = getSerialized(newValue);\n                this.mountReactApp();\n            }\n            /**\n             * When a property is changed, this callback function is called.\n             * @param name name of the property\n             * @param oldValue value before change\n             * @param newValue value after change\n             */\n            propertyChangedCallback(name, oldValue, newValue) {\n                if (!this.hasConnected) {\n                    return;\n                }\n                if (oldValue === newValue) {\n                    return;\n                }\n                this.properties[name] = newValue;\n                this.mountReactApp();\n            }\n            /**\n             * Web Component gets unmounted from the DOM.\n             */\n            disconnectedCallback() {\n                ReactDOM.unmountComponentAtNode(this);\n            }\n            /**\n             * Setup getters and setters for all properties.\n             * Here we ensure that the 'propertyChangedCallback' will get invoked\n             * when a property changes.\n             */\n            subscribeToProperties() {\n                const propertyMap = {};\n                Object.keys(this.initialProperties).forEach((key) => {\n                    propertyMap[key] = {\n                        configurable: true,\n                        enumerable: true,\n                        get: () => {\n                            const currentValue = this.properties.hasOwnProperty(key)\n                                ? this.properties[key]\n                                : this.initialProperties[key];\n                            return currentValue;\n                        },\n                        set: (newValue) => {\n                            const oldValue = this.properties.hasOwnProperty(key)\n                                ? this.properties[key]\n                                : this.initialProperties[key];\n                            this.propertyChangedCallback(key, oldValue, newValue);\n                        },\n                    };\n                });\n                Object.defineProperties(this, propertyMap);\n            }\n            /**\n             * Syncronize all properties and attributes\n             */\n            syncronizePropertiesAndAttributes() {\n                Object.keys(this.initialProperties).forEach((key) => {\n                    if (this.properties.hasOwnProperty(key)) {\n                        return;\n                    }\n                    if (this.getAttribute(key) !== null) {\n                        this.properties[key] = getSerialized(this.getAttribute(key));\n                        return;\n                    }\n                    this.properties[key] = this.initialProperties[key];\n                });\n            }\n            /**\n             * Transfer initial properties from the custom element.\n             */\n            transferInitialProperties() {\n                Object.keys(this.initialProperties).forEach((key) => {\n                    if (this.hasOwnProperty(key)) {\n                        this.properties[key] = this[key];\n                    }\n                });\n            }\n            /**\n             * Apply plugins\n             */\n            applyPlugins(application) {\n                const shadowChildren = [];\n                const applicationWithPlugins = registeredPlugins.reduce((app, currentPlugin) => {\n                    const pluginResult = currentPlugin(this, factory.plugins, app);\n                    if (!pluginResult) {\n                        return app;\n                    }\n                    const [wrapper, shadowChild] = pluginResult;\n                    if (shadowChild) {\n                        shadowChildren.push(shadowChild);\n                    }\n                    return wrapper;\n                }, application);\n                return [applicationWithPlugins, shadowChildren];\n            }\n            /**\n             * Generate react props based on properties and attributes.\n             */\n            reactProps() {\n                this.syncronizePropertiesAndAttributes();\n                return this.properties;\n            }\n            /**\n             * Mount React App onto the Web Component\n             */\n            mountReactApp(options) {\n                const anonymousSlot = factory.anonymousSlot ? React.createElement('slot') : undefined;\n                const application = (React.createElement(EventProvider, { value: this.eventDispatcher }, React.createElement(factory.rootComponent, this.reactProps(), anonymousSlot)));\n                const [applicationWithPlugins, shadowChildren] = this.applyPlugins(application);\n                if (!factory.shadow) {\n                    ReactDOM.render(applicationWithPlugins, this);\n                    return;\n                }\n                let currentChildren;\n                if (options === null || options === void 0 ? void 0 : options.initial) {\n                    currentChildren = Array.from(this.children).map((child) => child.cloneNode(true));\n                }\n                const root = createProxyRoot(this, shadowChildren);\n                ReactDOM.render(React.createElement(root.open, null, applicationWithPlugins), this);\n                if (currentChildren) {\n                    currentChildren.forEach((child) => this.append(child));\n                }\n            }\n        };\n    }\n}\nexport default WebComponentFactory;\n"]},"metadata":{},"sourceType":"module"}