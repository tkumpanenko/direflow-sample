import { injectIntoHead } from '../helpers/domControllers';
const externalLoaderPlugin = (element, plugins, app) => {
    var _a;
    const plugin = plugins === null || plugins === void 0 ? void 0 : plugins.find((p) => p.name === 'external-loader');
    const paths = (_a = plugin === null || plugin === void 0 ? void 0 : plugin.options) === null || _a === void 0 ? void 0 : _a.paths;
    if (!paths || !paths.length || !app) {
        return;
    }
    const scriptTags = [];
    const styleTags = [];
    paths.forEach((path) => {
        const actualPath = typeof path === 'string' ? path : path.src;
        const async = typeof path === 'string' ? false : path.async;
        const useHead = typeof path === 'string' ? undefined : path.useHead;
        if (actualPath.endsWith('.js')) {
            const script = document.createElement('script');
            script.src = actualPath;
            script.async = !!async;
            if (useHead !== undefined && !useHead) {
                script.setAttribute('use-head', 'false');
            }
            else {
                script.setAttribute('use-head', 'true');
            }
            scriptTags.push(script);
        }
        if (actualPath.endsWith('.css')) {
            const link = document.createElement('link');
            link.rel = 'stylesheet';
            link.href = actualPath;
            if (useHead) {
                link.setAttribute('use-head', 'true');
            }
            else {
                link.setAttribute('use-head', 'false');
            }
            styleTags.push(link);
        }
    });
    const insertionPoint = document.createElement('span');
    insertionPoint.id = 'direflow_external-sources';
    if (!window.externalSourcesLoaded) {
        window.externalSourcesLoaded = {};
    }
    scriptTags.forEach((script) => {
        if (script.getAttribute('use-head') === 'true') {
            injectIntoHead(script);
        }
        else {
            insertionPoint.appendChild(script);
        }
        window.externalSourcesLoaded[script.src] = {
            state: 'loading',
        };
        script.addEventListener('load', () => {
            var _a, _b;
            window.externalSourcesLoaded[script.src].state = 'completed';
            (_b = (_a = window.externalSourcesLoaded[script.src]).callback) === null || _b === void 0 ? void 0 : _b.call(_a);
        });
    });
    styleTags.forEach((link) => {
        if (link.getAttribute('use-head') === 'true') {
            injectIntoHead(link);
        }
        else {
            insertionPoint.appendChild(link);
        }
        window.externalSourcesLoaded[link.href] = {
            state: 'loading',
        };
        link.addEventListener('load', () => {
            var _a, _b;
            window.externalSourcesLoaded[link.href].state = 'completed';
            (_b = (_a = window.externalSourcesLoaded[link.href]).callback) === null || _b === void 0 ? void 0 : _b.call(_a);
        });
    });
    return [app, insertionPoint];
};
export default externalLoaderPlugin;
