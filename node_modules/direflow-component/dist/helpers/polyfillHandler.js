var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import asyncScriptLoader from './asyncScriptLoader';
let didIncludeOnce = false;
const DEFAULT_SD = 'https://cdn.jsdelivr.net/npm/@webcomponents/webcomponentsjs@2.4.1/bundles/webcomponents-sd.js';
const DEFAULT_CE = 'https://cdn.jsdelivr.net/npm/@webcomponents/webcomponentsjs@2.4.1/bundles/webcomponents-ce.js';
const DEFAULT_AD = 'https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/2.4.1/custom-elements-es5-adapter.js';
const includePolyfills = (options, plugins) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f;
    if (didIncludeOnce) {
        return;
    }
    const scriptsList = [];
    let useSD = '';
    let useCE = '';
    let useAD = '';
    const polyfillLoaderPlugin = plugins === null || plugins === void 0 ? void 0 : plugins.find((plugin) => plugin.name === 'polyfill-loader');
    if (polyfillLoaderPlugin) {
        console.warn('polyfill-loader plugin is deprecated. Use direflow-config.json instead.' + '\n' +
            'See more: https://direflow.io/configuration');
    }
    const polyfillSD = (_a = process.env.DIREFLOW_SD) !== null && _a !== void 0 ? _a : (_b = polyfillLoaderPlugin === null || polyfillLoaderPlugin === void 0 ? void 0 : polyfillLoaderPlugin.options) === null || _b === void 0 ? void 0 : _b.use.sd;
    const polyfillCE = (_c = process.env.DIREFLOW_CE) !== null && _c !== void 0 ? _c : (_d = polyfillLoaderPlugin === null || polyfillLoaderPlugin === void 0 ? void 0 : polyfillLoaderPlugin.options) === null || _d === void 0 ? void 0 : _d.use.ce;
    const polyfillAdapter = (_e = process.env.DIREFLOW_ADAPTER) !== null && _e !== void 0 ? _e : (_f = polyfillLoaderPlugin === null || polyfillLoaderPlugin === void 0 ? void 0 : polyfillLoaderPlugin.options) === null || _f === void 0 ? void 0 : _f.use.adapter;
    const disableSD = polyfillSD === false;
    const disableCE = polyfillCE === false;
    const disableAD = polyfillAdapter === false;
    if (polyfillSD) {
        useSD = typeof polyfillSD === 'string'
            ? polyfillSD
            : DEFAULT_SD;
    }
    if (polyfillCE) {
        useCE = typeof polyfillCE === 'string'
            ? polyfillCE
            : DEFAULT_CE;
    }
    if (polyfillAdapter) {
        useAD = typeof polyfillAdapter === 'string'
            ? polyfillAdapter
            : DEFAULT_AD;
    }
    if (options.usesShadow && !disableSD) {
        scriptsList.push(asyncScriptLoader(useSD || DEFAULT_SD, 'wcPolyfillsLoaded'));
    }
    if (!disableCE) {
        scriptsList.push(asyncScriptLoader(useCE || DEFAULT_CE, 'wcPolyfillsLoaded'));
    }
    if (!disableAD) {
        scriptsList.push(asyncScriptLoader(useAD || DEFAULT_AD, 'wcPolyfillsLoaded'));
    }
    try {
        yield Promise.all(scriptsList);
        didIncludeOnce = true;
    }
    catch (error) {
        console.error(error);
    }
});
export default includePolyfills;
